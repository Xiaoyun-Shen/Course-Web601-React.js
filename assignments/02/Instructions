Overview: This week we’ll be taking a closer look at the Component API. We’ll cover the life cycle methods, props (properties), and getting more practise working with logic and state inside of components. 

Learning Materials: These are free online resources which contain all the information you’ll need to complete the assignment. If you get stuck on anything ask the instructor for help.

Props: https://reactjs.org/docs/components-and-props.html
Conditional Rendering: https://reactjs.org/docs/conditional-rendering.html
Lifting State: https://reactjs.org/docs/lifting-state-up.html
Lifecycle: https://reactjs.org/docs/state-and-lifecycle.html
Assignment #2 Hints: https://docs.google.com/document/d/1NmpFyOeku6tYWCBef4hLd6Fti9O8Iwp2B2KQBZvm8Oo/edit?usp=sharing



Note: This assignment builds on the concepts covered in “Assignment #1: The Basics”. In order to complete this assignment, you’ll need to have completed Part #1 from Assignment #1. If you have not completed it yet, go complete it now:  https://docs.google.com/document/d/1VMxbGbR6cXZBdA4aniRnwty0iGdN5kbdrN1AYRPA1dw/edit?usp=sharing

Goal: We’ll be building a stop watch component in class this week. The end result will look something like this:











Part #0: Setup
Copy this code: https://docs.google.com/document/d/1VJ6a89GpWxrAFiJ9OVqlCDjn_zVbzZgm_YlOklckIWo/edit?usp=sharing


Save it under a file called “index.html” under your source code repo from assignment #1. It should have the path:	

	assignments/02/index.html


Create a file called “index.js” under the following path:

	assignments/02/index.js


Copy this code into “index.js”:

https://raw.githubusercontent.com/JonCSGuy/advanced-javascript/master/assignments/02/index.js



Start up your http server (“npm start”), visit 

http://127.0.0.1:8080/assignments/02/

And confirm you’re able to view the web page with the content “Assignment #2”


Your project is now setup for assignment #2. You will write all your source code in side of “index.js”












Part #1 (1 mark): Create a “TimeDisplay” component that displays a formatted time value. The component must meet the following requirements:


It accepts a ‘millisecond’ value as a prop. 
The ‘millisecond’ value will be displayed as a time value in the format “Minute:Seconds:Centiseconds”. 
Examples
the value “1543” as “milliseconds”, it would display as “00:01:54”
the value “72689” would display as “01:12:68”
Hint: Refer to the props example on how to work with props: https://github.com/JonCSGuy/advanced-javascript/blob/master/src/examples/props.js
You can also check out the react documentation
When the millisecond value is less than or equal to zero, the component should display the string “Times up!” instead of a time value.
Hint: Refer to the conditional logic example on how to render different outputs based on an if statement: https://github.com/JonCSGuy/advanced-javascript/blob/master/src/examples/conditional-rendering.js


Part #2 (1 mark): Create a “Watch” stateful component that will have logic to control the flow of time. The component must meet the following requirements:


The component should accept two properties:
“startTime” which is the value in milliseconds to start the watch at
“countDown” which is a boolean value indicating whether the watch should count up or down.
The component should have a state value:
“currentMilliseconds”: which is the current millisecond value of the watch
When the component mounts, it should use the JavaScript function “setInterval” to begin a timer (google “mdn setInterval” if you’re not familiar with the function). You can also checkout the react documentation for an example. 
This timer should update the state value of “currentMilliseconds” so the watch counts either up or down (based on whether “countDown” is true or false)
The component render the “TimeDisplay” component from Part #1 and pass in “currentMilliseconds” as the “millisecond” prop value. 
The end result is that “TimeDisplay” will update in real time as the watch counts up or down. 
Hint: Refer to the life cycle example on the github, specifically “componentDidMount”:
https://github.com/JonCSGuy/advanced-javascript/blob/master/src/examples/lifecycle.js
Also checkout the react documentation if you get stuck.
https://reactjs.org/docs/state-and-lifecycle.html#adding-lifecycle-methods-to-a-class


Part #3 (1 mark): Create a “Controls” component which will control our watch. It should meet the following requirements:

The Controls component should be nested inside of the “Watch” component.
When values on the “Controls” component change, they should update “Watch”’s state
It should have two radio buttons:
“Count Up”
“Count Down”
When “count down” is clicked, it should set the Watch’s countDown state value to “true”
When “count up” is clicked, it should set the Watch’s countDown state value to “false”
It should have an input text field called “Start Time” which accepts a millisecond value
When the value of “Start Time” is entered, it should update the Watch’s “currentMillisecond” state value to the new value
Hint: Refer to the code example for lifting state:
https://github.com/JonCSGuy/advanced-javascript/blob/master/src/examples/lifting-state.js
You can also read the react documentation on forms if you need ideas on how to make you controls work: https://reactjs.org/docs/forms.html

Part #4 (2 marks): Commit your code and push it up to your github (refer to assignment #1 if you forget how to do that). Alternatively you can google “git commit” and “git push” or ask the instructor for help. You will get the full 5/5 marks if all of your code from parts 1-3 work and meet the requirements as stated in the assignment. You will get 4/5 marks if you simply submit something reasonable that at least makes an attempt at completing the entire assignment.

